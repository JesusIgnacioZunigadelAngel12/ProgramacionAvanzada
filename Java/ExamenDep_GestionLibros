package Modelo;

public class DefinicionAtributo {
    private String nombre;
    private String tipo;

    public DefinicionAtributo() {}

    public DefinicionAtributo(String nombre, String tipo) {
        this.nombre = nombre;
        this.tipo = tipo;
    }

    public String getNombre() { return nombre; }
    public String getTipo() { return tipo; }
    public void setNombre(String nombre) { this.nombre = nombre; }
    public void setTipo(String tipo) { this.tipo = tipo; }
}

package Modelo;

import java.util.HashMap;
import java.util.Map;

public class Entidad {
    private Map<String, Object> atributos;

    public Entidad() {
        this.atributos = new HashMap<>();
    }

    public void setAtributo(String nombre, Object valor) {
        atributos.put(nombre, valor);
    }

    public Object getAtributo(String nombre) {
        return atributos.get(nombre);
    }

    public Map<String, Object> getAtributos() {
        return new HashMap<>(atributos);
    }

    public void setAtributos(Map<String, Object> atributos) {
        this.atributos = atributos;
    }
}

package Modelo;

import java.util.ArrayList;
import java.util.List;

public class GestorEntidades {
    private List<DefinicionAtributo> definicionAtributos;
    private List<Entidad> entidades;
    private String identificadorUnico;

    public GestorEntidades() {
        this.definicionAtributos = new ArrayList<>();
        this.entidades = new ArrayList<>();
    }

    public List<DefinicionAtributo> getDefinicionAtributos() {
        return definicionAtributos;
    }

    public void setDefinicionAtributos(List<DefinicionAtributo> definicionAtributos) {
        this.definicionAtributos = definicionAtributos;
    }

    public List<Entidad> getEntidades() {
        return entidades;
    }

    public void setEntidades(List<Entidad> entidades) {
        this.entidades = entidades;
    }

    public String getIdentificadorUnico() {
        return identificadorUnico;
    }

    public void setIdentificadorUnico(String identificadorUnico) {
        this.identificadorUnico = identificadorUnico;
    }

    public void agregarDefinicionAtributo(DefinicionAtributo atributo) {
        definicionAtributos.add(atributo);
    }

    public void agregarEntidad(Entidad entidad) {
        entidades.add(entidad);
    }

    public boolean esIdentificadorUnicoValido(String valor) {
        return entidades.stream()
                .noneMatch(e -> valor.equals(e.getAtributo(identificadorUnico)));
    }
}

package Modelo;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.File;
import java.io.IOException;

public class PersistenciaService {
    private static PersistenciaService instancia;
    private static final String ARCHIVO_JSON = "datos.json";
    private ObjectMapper objectMapper = new ObjectMapper();

    private PersistenciaService() {}

    public static PersistenciaService getInstancia() {
        if (instancia == null) {
            instancia = new PersistenciaService();
        }
        return instancia;
    }

    public void guardarDatos(GestorEntidades gestor) throws IOException {
        objectMapper.writeValue(new File(ARCHIVO_JSON), gestor);
    }

    public GestorEntidades cargarDatos() throws IOException {
        File archivo = new File(ARCHIVO_JSON);
        if (archivo.exists() && archivo.length() > 0) {
            return objectMapper.readValue(archivo, GestorEntidades.class);
        }
        return new GestorEntidades();
    }

    public void inicializarArchivoSiNoExiste() throws IOException {
        File archivo = new File(ARCHIVO_JSON);
        if (!archivo.exists()) {
            guardarDatos(new GestorEntidades());
        }
    }
}

package Controlador;

import Modelo.GestorEntidades;
import Modelo.DefinicionAtributo;
import Vista.VistaDefinicionAtributos;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;

public class ControladorDefinicionAtributos implements ActionListener {
    private VistaDefinicionAtributos vista;
    private GestorEntidades gestor;

    public ControladorDefinicionAtributos(VistaDefinicionAtributos vista, GestorEntidades gestor) {
        this.vista = vista;
        this.gestor = gestor;
        this.vista.getBtnContinuar().addActionListener(this);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        List<DefinicionAtributo> atributos = vista.getAtributosDefinidos();
        String idUnico = vista.getIdentificadorUnico().trim();

        // Validación básica de campos requeridos
        if (atributos.isEmpty()) {
            vista.mostrarError("Debe definir los atributos del libro");
            return;
        }

        if (idUnico.isEmpty()) {
            vista.mostrarError("Seleccione el campo que será el ID único");
            return;
        }

        // Configurar el gestor con los atributos
        gestor = new GestorEntidades();
        for (DefinicionAtributo def : atributos) {
            gestor.agregarDefinicionAtributo(def);
        }
        gestor.setIdentificadorUnico(idUnico);

        // Pasar a la vista principal de gestión
        Vista.VistaEntidades vistaCRUD = new Vista.VistaEntidades(gestor);
        new Controlador.ControladorEntidades(vistaCRUD, gestor);
        vista.dispose(); // Cierra la ventana actual
        vistaCRUD.setVisible(true);
    }
}

package Controlador;

import Modelo.GestorEntidades;
import Modelo.DefinicionAtributo;
import Modelo.Entidad;
import Vista.VistaEntidades;
import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;

public class ControladorEntidades {
    private VistaEntidades vista;
    private GestorEntidades gestor;
    private Entidad entidadSeleccionada;

    public ControladorEntidades(VistaEntidades vista, GestorEntidades gestor) {
        this.vista = vista;
        this.gestor = gestor;
        configurarListeners();
        
        if (gestor.getEntidades() != null) {
            vista.actualizarTabla(gestor.getEntidades());
        }
    }

    private void configurarListeners() {
        // Listener para selección de fila
        vista.getTablaEntidades().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int filaSeleccionada = vista.getTablaEntidades().getSelectedRow();
                if (filaSeleccionada >= 0) {
                    // Convertir índice de vista a modelo (por si hay ordenamiento/filtrado)
                    int modelRow = vista.getTablaEntidades().convertRowIndexToModel(filaSeleccionada);
                    if (modelRow < gestor.getEntidades().size()) {
                        entidadSeleccionada = gestor.getEntidades().get(modelRow);
                        vista.mostrarDetalleEntidad(entidadSeleccionada);
                    }
                }
            }
        });

        // Listener para botón Eliminar
        vista.getBtnEliminar().addActionListener(e -> {
            if (entidadSeleccionada != null) {
                int confirmacion = JOptionPane.showConfirmDialog(
                    vista,
                    "¿Está seguro de eliminar el libro: " + 
                    entidadSeleccionada.getAtributo("nombre") + "?",
                    "Confirmar eliminación",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE
                );
                
                if (confirmacion == JOptionPane.YES_OPTION) {
                    gestor.getEntidades().remove(entidadSeleccionada);
                    vista.actualizarTabla(gestor.getEntidades());
                    vista.limpiarCampos();
                    entidadSeleccionada = null;
                    vista.mostrarMensaje("Libro eliminado correctamente");
                }
            } else {
                vista.mostrarError("Seleccione un libro para eliminar");
            }
        });

        // Listeners para otros botones (Agregar y Guardar)
        vista.getBtnAgregar().addActionListener(e -> agregarLibro());
        vista.getBtnGuardar().addActionListener(e -> guardarCambios());
    }

    private void agregarLibro() {
        try {
            Entidad nuevoLibro = new Entidad();
            List<JTextField> campos = vista.getCamposDetalle();
            
            for (int i = 0; i < campos.size(); i++) {
                DefinicionAtributo atributo = gestor.getDefinicionAtributos().get(i);
                String valor = campos.get(i).getText();
                
                if (atributo.getTipo().equals("Integer")) {
                    nuevoLibro.setAtributo(atributo.getNombre(), Integer.parseInt(valor));
                } else {
                    nuevoLibro.setAtributo(atributo.getNombre(), valor);
                }
            }
            
            gestor.agregarEntidad(nuevoLibro);
            vista.actualizarTabla(gestor.getEntidades());
            vista.limpiarCampos();
            
        } catch (NumberFormatException ex) {
            vista.mostrarError("Formato incorrecto para campos numéricos");
        }
    }

    private void guardarCambios() {
        if (entidadSeleccionada == null) {
            vista.mostrarError("Seleccione un libro para editar");
            return;
        }

        try {
            List<JTextField> campos = vista.getCamposDetalle();
            
            for (int i = 0; i < campos.size(); i++) {
                DefinicionAtributo atributo = gestor.getDefinicionAtributos().get(i);
                String valor = campos.get(i).getText();
                
                if (atributo.getTipo().equals("Integer")) {
                    entidadSeleccionada.setAtributo(atributo.getNombre(), Integer.parseInt(valor));
                } else {
                    entidadSeleccionada.setAtributo(atributo.getNombre(), valor);
                }
            }
            
            vista.actualizarTabla(gestor.getEntidades());
            vista.mostrarMensaje("Cambios guardados correctamente");
            
        } catch (NumberFormatException ex) {
            vista.mostrarError("Formato incorrecto para campos numéricos");
        }
    }
}

package Vista;

import Modelo.DefinicionAtributo;
import Modelo.GestorEntidades;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.List;

public class VistaDefinicionAtributos extends JFrame {
    private JPanel panel;
    private List<JTextField> camposNombre;
    private List<JComboBox<String>> combosTipo;
    private JButton btnContinuar;
    private JComboBox<String> comboIdUnico;

    // Estilos personalizados
    private static final Color COLOR_FONDO = new Color(240, 245, 250);
    private static final Color COLOR_PRIMARIO = new Color(0, 123, 255);
    private static final Color COLOR_TEXTO = new Color(50, 50, 50);
    private static final Font FUENTE_NORMAL = new Font("Segoe UI", Font.PLAIN, 14);
    private static final Font FUENTE_TITULO = new Font("Segoe UI", Font.BOLD, 16);

    public VistaDefinicionAtributos(GestorEntidades gestor) {
        this.setTitle("📘 Definir Atributos de Libros");
        this.setSize(600, 500);
        this.setMinimumSize(new Dimension(500, 400));
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setLocationRelativeTo(null); // Centrar ventana

        panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        panel.setBackground(COLOR_FONDO);
        panel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        camposNombre = new ArrayList<>();
        combosTipo = new ArrayList<>();

        // Panel ID Único
        JPanel panelIdUnico = new JPanel(new FlowLayout(FlowLayout.LEFT));
        panelIdUnico.setBackground(COLOR_FONDO);
        JLabel labelId = new JLabel("Atributo ID único:");
        labelId.setFont(FUENTE_NORMAL);
        labelId.setForeground(COLOR_TEXTO);
        comboIdUnico = new JComboBox<>();
        comboIdUnico.setFont(FUENTE_NORMAL);
        panelIdUnico.add(labelId);
        panelIdUnico.add(comboIdUnico);
        panel.add(panelIdUnico);

        // Separador visual
        panel.add(Box.createRigidArea(new Dimension(0, 10)));

        // Agregar campos iniciales
        agregarCampoAtributo("nombre");
        agregarCampoAtributo("id");
        agregarCampoAtributo("autor");

        // Botón "Agregar Otro Atributo"
        JButton btnAgregar = crearBoton("➕ Agregar Otro Atributo", COLOR_PRIMARIO);
        btnAgregar.addActionListener(e -> agregarCampoAtributo(""));

        // Botón "Continuar"
        btnContinuar = crearBoton("➡️ Continuar", COLOR_PRIMARIO.darker());

        // Panel de botones
        JPanel botonesPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        botonesPanel.setBackground(COLOR_FONDO);
        botonesPanel.add(btnAgregar);
        botonesPanel.add(btnContinuar);

        // Agrupar todo
        JScrollPane scrollPane = new JScrollPane(panel);
        scrollPane.setBorder(BorderFactory.createEmptyBorder());
        add(scrollPane, BorderLayout.CENTER);
        add(botonesPanel, BorderLayout.SOUTH);

        // Título superior
        JLabel titulo = new JLabel("📘 Definir Atributos de Libros", SwingConstants.CENTER);
        titulo.setFont(FUENTE_TITULO);
        titulo.setForeground(COLOR_TEXTO);
        add(titulo, BorderLayout.NORTH);
    }

    private JButton crearBoton(String texto, Color color) {
        JButton boton = new JButton(texto);
        boton.setFont(FUENTE_NORMAL);
        boton.setBackground(color);
        boton.setForeground(Color.WHITE);
        boton.setFocusPainted(false);
        boton.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(color.brighter(), 1),
                BorderFactory.createEmptyBorder(8, 12, 8, 12)
        ));
        boton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        boton.setBorderPainted(false);
        boton.setContentAreaFilled(true);
        boton.setOpaque(true);

        // Hover effect
        boton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                boton.setBackground(color.brighter());
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                boton.setBackground(color);
            }
        });

        return boton;
    }

    private void agregarCampoAtributo(String nombreSugerido) {
        JPanel fila = new JPanel(new GridLayout(1, 4, 10, 5));
        fila.setBackground(COLOR_FONDO);

        JTextField campoNombre = new JTextField(nombreSugerido);
        campoNombre.setFont(FUENTE_NORMAL);
        campoNombre.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(Color.LIGHT_GRAY),
                BorderFactory.createEmptyBorder(5, 10, 5, 10)
        ));

        JComboBox<String> comboTipo = new JComboBox<>(new String[]{"String", "Integer"});
        comboTipo.setFont(FUENTE_NORMAL);

        camposNombre.add(campoNombre);
        combosTipo.add(comboTipo);

        fila.add(new JLabel("Nombre:"));
        fila.add(campoNombre);
        fila.add(new JLabel("Tipo:"));
        fila.add(comboTipo);

        panel.add(fila);
        panel.revalidate();
        panel.repaint();

        comboIdUnico.addItem(campoNombre.getText().isEmpty() ? "" : campoNombre.getText());
    }

    public JButton getBtnContinuar() {
        return btnContinuar;
    }

    public String getIdentificadorUnico() {
        return comboIdUnico.getSelectedItem() != null ? comboIdUnico.getSelectedItem().toString() : "";
    }

    public List<DefinicionAtributo> getAtributosDefinidos() {
        List<DefinicionAtributo> atributos = new ArrayList<>();
        for (int i = 0; i < camposNombre.size(); i++) {
            String nombre = camposNombre.get(i).getText().trim();
            if (!nombre.isEmpty()) {
                atributos.add(new DefinicionAtributo(nombre, combosTipo.get(i).getSelectedItem().toString()));
            }
        }
        return atributos;
    }

    public void mostrarError(String mensaje) {
        JOptionPane.showMessageDialog(this, mensaje, "❌ Error", JOptionPane.ERROR_MESSAGE);
    }
}

package Vista;

import Modelo.DefinicionAtributo;
import Modelo.Entidad;
import Modelo.GestorEntidades;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.util.ArrayList;
import java.util.List;

public class VistaEntidades extends JFrame {
    private JTable tablaEntidades;
    private DefaultTableModel modeloTabla;
    private JPanel panelPrincipal, panelDetalle;
    private JButton btnAgregar, btnEliminar, btnGuardar;
    private List<JTextField> camposDetalle = new ArrayList<>();
    private List<DefinicionAtributo> definicionAtributos;
    private GestorEntidades gestor;

    // Colores personalizados
    private static final Color COLOR_FONDO = new Color(240, 245, 250);
    private static final Color COLOR_PRIMARIO = new Color(0, 123, 255);
    private static final Color COLOR_TEXTO = new Color(50, 50, 50);
    private static final Font FUENTE_TITULO = new Font("Segoe UI", Font.BOLD, 16);
    private static final Font FUENTE_NORMAL = new Font("Segoe UI", Font.PLAIN, 14);

    public VistaEntidades(GestorEntidades gestor) {
        this.gestor = gestor;

        if (gestor.getDefinicionAtributos() == null || gestor.getDefinicionAtributos().isEmpty()) {
            definicionAtributos = new ArrayList<>();
        } else {
            definicionAtributos = gestor.getDefinicionAtributos();
        }

        setTitle("📚 Gestión de Libros");
        setSize(900, 700);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setMinimumSize(new Dimension(800, 600));
        setLocationRelativeTo(null); // Centrar ventana

        panelPrincipal = new JPanel(new BorderLayout());
        panelPrincipal.setBackground(COLOR_FONDO);
        panelPrincipal.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        // Tabla de entidades
        modeloTabla = new DefaultTableModel();

        if (definicionAtributos != null && !definicionAtributos.isEmpty()) {
            for (DefinicionAtributo def : definicionAtributos) {
                modeloTabla.addColumn(def.getNombre());
            }
        } else {
            modeloTabla.addColumn("Sin atributos definidos");
        }

        tablaEntidades = new JTable(modeloTabla);
        JScrollPane scrollTabla = new JScrollPane(tablaEntidades);
        tablaEntidades.setFont(FUENTE_NORMAL);
        tablaEntidades.setRowHeight(25);

        // Panel de botones
        btnAgregar = crearBoton("➕ Agregar", COLOR_PRIMARIO);
        btnEliminar = crearBoton("🗑️ Eliminar", Color.RED);
        btnGuardar = crearBoton("💾 Guardar Cambios", Color.GREEN.darker());

        JPanel botonesPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        botonesPanel.setBackground(COLOR_FONDO);
        botonesPanel.add(btnAgregar);
        botonesPanel.add(btnEliminar);
        botonesPanel.add(btnGuardar);

        // Panel de detalle
        panelDetalle = new JPanel(new GridLayout(0, 2, 10, 10));
        panelDetalle.setBackground(Color.WHITE);
        panelDetalle.setBorder(BorderFactory.createTitledBorder(
                BorderFactory.createLineBorder(COLOR_PRIMARIO, 1),
                "Detalles del Libro",
                0, 0,
                FUENTE_NORMAL,
                COLOR_TEXTO
        ));
        actualizarPanelDetalle();

        // Agrupar todo
        panelPrincipal.add(scrollTabla, BorderLayout.CENTER);

        JPanel topPanel = new JPanel(new BorderLayout());
        JLabel titulo = new JLabel("📚 Gestión de Libros", SwingConstants.LEFT);
        titulo.setFont(FUENTE_TITULO);
        titulo.setForeground(COLOR_TEXTO);
        topPanel.add(titulo, BorderLayout.NORTH);
        topPanel.add(botonesPanel, BorderLayout.CENTER);
        topPanel.setBackground(COLOR_FONDO);

        panelPrincipal.add(topPanel, BorderLayout.NORTH);
        panelPrincipal.add(panelDetalle, BorderLayout.SOUTH);

        add(panelPrincipal);

        // Cargar datos iniciales
        if (gestor.getEntidades() != null) {
            actualizarTabla(gestor.getEntidades());
        }
    }

    // Método auxiliar para crear botones con estilo
    private JButton crearBoton(String texto, Color color) {
        JButton boton = new JButton(texto);
        boton.setFont(FUENTE_NORMAL);
        boton.setBackground(color);
        boton.setForeground(Color.WHITE);
        boton.setFocusPainted(false);
        boton.setBorder(BorderFactory.createEmptyBorder(10, 15, 10, 15));
        boton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        boton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                boton.setBackground(color.darker());
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                boton.setBackground(color);
            }
        });
        return boton;
    }

    public void actualizarTabla(List<Entidad> entidades) {
        modeloTabla.setRowCount(0);

        if (definicionAtributos == null || definicionAtributos.isEmpty()) {
            return;
        }

        for (Entidad entidad : entidades) {
            Object[] fila = new Object[definicionAtributos.size()];
            for (int i = 0; i < definicionAtributos.size(); i++) {
                String nombre = definicionAtributos.get(i).getNombre();
                Object valor = entidad.getAtributo(nombre);
                fila[i] = valor != null ? valor : "";
            }
            modeloTabla.addRow(fila);
        }
    }

    public void actualizarTabla() {
        if (gestor.getEntidades() != null) {
            actualizarTabla(gestor.getEntidades());
        }
    }

    public void limpiarCampos() {
        camposDetalle.forEach(campo -> campo.setText(""));
    }

    public void mostrarDetalleEntidad(Entidad entidad) {
        for (int i = 0; i < definicionAtributos.size(); i++) {
            String nombreAtributo = definicionAtributos.get(i).getNombre();
            Object valor = entidad.getAtributo(nombreAtributo);
            camposDetalle.get(i).setText(valor != null ? valor.toString() : "");
        }
    }

    public void mostrarError(String mensaje) {
        JOptionPane.showMessageDialog(this, mensaje, "❌ Error", JOptionPane.ERROR_MESSAGE);
    }

    public void mostrarMensaje(String mensaje) {
        JOptionPane.showMessageDialog(this, mensaje, "✅ Éxito", JOptionPane.INFORMATION_MESSAGE);
    }

    public void actualizarPanelDetalle() {
        panelDetalle.removeAll();
        camposDetalle.clear();

        if (definicionAtributos == null || definicionAtributos.isEmpty()) {
            definicionAtributos = new ArrayList<>();
        }

        for (DefinicionAtributo atributo : definicionAtributos) {
            JTextField campo = new JTextField();
            campo.setFont(FUENTE_NORMAL);
            campo.setBorder(BorderFactory.createCompoundBorder(
                    BorderFactory.createLineBorder(Color.LIGHT_GRAY),
                    BorderFactory.createEmptyBorder(5, 10, 5, 10)
            ));
            camposDetalle.add(campo);
            JLabel etiqueta = new JLabel(atributo.getNombre() + ":");
            etiqueta.setFont(FUENTE_NORMAL);
            panelDetalle.add(etiqueta);
            panelDetalle.add(campo);
        }

        panelDetalle.revalidate();
        panelDetalle.repaint();
    }

    public JButton getBtnAgregar() { return btnAgregar; }
    public JButton getBtnEliminar() { return btnEliminar; }
    public JButton getBtnGuardar() { return btnGuardar; }
    public JTable getTablaEntidades() { return tablaEntidades; }
    public List<JTextField> getCamposDetalle() { return camposDetalle; }
}

package Main;

import Modelo.GestorEntidades;
import Vista.VistaDefinicionAtributos;
import java.awt.EventQueue;

import Controlador.ControladorDefinicionAtributos;

public class main {
    public static void main(String[] args) {
        EventQueue.invokeLater(() -> {
            GestorEntidades gestor = new GestorEntidades();
            VistaDefinicionAtributos vista = new VistaDefinicionAtributos(gestor);
            new ControladorDefinicionAtributos(vista, gestor);
            vista.setVisible(true);
        });
    }
}


